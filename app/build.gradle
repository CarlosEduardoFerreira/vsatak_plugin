////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "1.0"
    ext.ATAK_VERSION = "4.2.0"

    def takdevVersion = '1.1.2'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'http://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/../../atak-gradle-takdev.jar")

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'

// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
                standardOutput = stdout
            }
            def describe = stdout.toString().trim()
            println("versionName[git]: $describe")
            return describe
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    executable = 'git'
                    args = ['show', '-s', '--format=%ct']
                    standardOutput = os
                    ignoreExitValue = true
                }

            def outputAsString = os.toString()
                ext.revision = "$outputAsString".toInteger()

                 println("version[git]: $revision")
        }
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       ext.revision = 1
    }

    return revision
}


//def boost_dir = local_props("boost.dir")
//def boost_dir_libs = boost_dir + "/libs"
//def boost_dir_inc  = boost_dir + "/include"

android {
    compileSdkVersion 26
    buildToolsVersion "29.0.3"
    defaultConfig {
        minSdkVersion 23

//        externalNativeBuild {
//            cmake {
//                //arguments '-DANDROID_STL=c++_shared'
//
//                // This is used in CMakeLists.txt so the native code can find/use (prebuilt) boost
//                //arguments '-DBOOST_LIBS_DIR=' + boost_dir_libs
//                //arguments '-DBOOST_INC_DIR='  + boost_dir_inc
//
//                //arguments '-IBOOST_INCLUDEDIR=' + boost_dir_inc
//                //arguments '-LBOOST_LIBRARYDIR' + boost_dir_libs
//                //arguments '-DBoost_DEBUG=ON'
//            }
//        }

        ndk {
            abiFilters 'arm64-v8a'/*, 'armeabi-v7a', 'x86_64', 'x86'*/
            stl 'c++_shared'
            ldLibs "log"
        }

        //ndkVersion "16.1.4479499"
        //ndkVersion "19.2.5345600"
        ndkVersion "21.4.7075529"

        //multiDexEnabled true
    }

//    splits {
//        abi {
//            enable true
//            reset()
//            include 'arm64-v8a'
//        }
//    }

    externalNativeBuild {
//        ndkBuild {
//            path "Application.mk"
//            path "Android.mk"
//        }
        cmake {
            version "3.18.1"

            // Running CMake - (Main file)
            println("Installing dependencies (CMakeLists) ...")
            path "src/main/cpp/CMakeLists.txt"
        }
    }/**/

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

   dexOptions {
       jumboMode = true

       //preDexLibraries false
    }

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError true
    }

    signingConfigs {
        debug {
            def kf = local_props('takDebugKeyFile')
            def kfp = local_props('takDebugKeyFilePassword')
            def ka = local_props('takDebugKeyAlias')
            def kp = local_props('takDebugKeyPassword')

            if (kf == null) {
                 throw GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }
        release {
            def kf = local_props('takReleaseKeyFile')
            def kfp = local_props('takReleaseKeyFilePassword')
            def ka = local_props('takReleaseKeyAlias')
            def kp = local_props('takReleaseKeyPassword')

            if (kf == null) {
                 throw GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }

        release {
            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
            matchingFallbacks = ['odk']
        }
    }
    /*
    git_repository(
            name = "com_github_gflags_gflags",
            commit = "9cfee34507cd80ce6d24a56be304f14ac74299d1",
            remote = "https://github.com/gflags/gflags.git"
    )/**/

    //preBuild.doFirst {
        //println("Executing qtoken install...")
        //commandLine 'sh', '-c', './src/main/qtoken/scripts/ubuntu-install.sh'

        //def proc = "src/main/qtoken/scripts/ubuntu-install.sh".execute()
        //proc.waitForProcessOutput(System.out, System.err)
    //}
    /*
    task installQToken(type: Exec) {
        println("Installing qtoken...")
        commandLine 'src/main/qtoken/scripts/ubuntu-install.sh'
    }
    build.dependsOn installQToken
    /**/


    flavorDimensions "application"

    productFlavors {
        mil {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".MIL"]
        }
        civ {
            getIsDefault().set(true)
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        fvey {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".FVEY"]
        }
        aus {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".AUS"]
            matchingFallbacks = 'fvey'
        }
        nzl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NZL"]
            matchingFallbacks = 'fvey'
        }
        prt {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".PRT"]
            matchingFallbacks = 'fvey'
        }
        nor {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NOR"]
            matchingFallbacks = 'fvey'
        }
        gbr {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".GBR"]
            matchingFallbacks = 'fvey'
        }
        can {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CAN"]
            matchingFallbacks = 'fvey'
        }
        intl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".INTL"]
            matchingFallbacks = 'fvey'
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"

            //jniLibs.srcDirs = ['src/main/cpp/libs']
            //jni.srcDirs = ['src/main/cpp/libs']

            //jni.srcDirs = ['src/main/jniLibs']
            //jniLibs.srcDirs = ['src/main/jniLibs']

            // Android Studio doesn't package precompiled external (*.so) libs into apk, even if linked against via "add_library (... SHARED IMPORTED) in CMakeLists.txt
            // See eg https://stackoverflow.com/questions/24357687/how-to-include-so-library-in-android-studio/29234765
            // Hopefully this will be remedied in near future.
            // As a workaround in the meantime, need to add them manually to jniLibs.srcDirs
            // Note: This causes ALL *.so files in ABI (eg "armeabi-v7a") subdir of this dir to get packaged into .apk - relative to "app" dir
            // If you want to just include those necessary (eg chrono, system) copy/link them to a separate dir, and reference that dir here instead.

            //jniLibs.srcDirs = [
                    //'src/main/jniLibs'

                    // should contain any external libs which should be compiled in {armeabi-v7a,arm64-v8a,x86,x86_64,mips} subdirs
                    //boost_dir_libs

                    //, "src/main/JniLibs/boost" // could add additional dirs (with ABI subdirs) to be packaged into apk like this.
                    // Relative paths like this will be interpreted as relative to "app" dir
            //]/**/
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }


    if (file("$project.projectDir/../espresso/testSetup.gradle").exists()) {
         apply from: '../../espresso/testSetup.gradle'
    } else {
         println("espresso test harness not found")
    }


//    packagingOptions {
//        doNotStrip '*/arm64-v8a/*.so'
//    }
}

repositories {
    maven {
        url 'https://dl.bintray.com/kotlin/kotlin-eap'
    }
    /*
    maven {
        url  "https://dl.bintray.com/terl/lazysodium-maven"
    }/**/

    mavenCentral()

    jcenter()
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation fileTree(dir: "$buildDir/native-libs", include: 'native-libs.jar')

    //implementation "net.java.dev.jna:jna:5.7.0@aar"
}


//------------------------------------------------------------
// reads ~ value from local.properties file
def local_props(key) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def val = properties.getProperty(key, null)
    if (val == null)
        throw GradleException("Can't find value '${key}' in file 'local.properties'.")

    return val
}